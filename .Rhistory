df <- lapply(curl, geocoder)
df
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
urls <- lapply(x, urlgetter)
df <- lapply(curl, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
shityeah
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
shityeah
addresses <- mv[-31,]$match_address
shityeah <- alsgeocoder(addresses)
shityeah
alsgeocoder <- function(addresses){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(addresses, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
addressez <- mv[-31,]$match_address
shityeah <- alsgeocoder(addressez)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
shityeah <- alsgeocoder(addresses)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
geocoder <- function(){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(results) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- x %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(results) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
View(shityeah)
rbind(shityeah)
lapply(shityeah, rbind)
chkers <- lapply(shityeah, rbind)
lapply
View(chkers)
shityeah <- alsgeocoder(addresses)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- x %>% read_html() %>% html_text() %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(results) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
library(rvest)
library(jsonlite)
library(purrr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
yelpdf <- readRDS("NL_Master.rds")
head(yelpdf)
yelpdf$name <- gsub("\\\n|   |  ", "", yelpdf$name) #Removes "\\n, and unnecessary spaces
# Address Clean-Up
yelpdf$address <- gsub("\\\n|    |  ", "", yelpdf$address)
yelpdf$address <- gsub("Portland", " Portland", yelpdf$address)
yelpdf$address <- gsub("Ste", " Ste", yelpdf$address)
yelpdf$address <- gsub("Beaverton", " Beaverton", yelpdf$address)
# Hours Clean-Up
yelpdf$mon_hrs <- gsub("\\\n|   |  ", "", yelpdf$mon_hrs)
yelpdf$tue_hrs <- gsub("\\\n|   |  ", "", yelpdf$tue_hrs)
yelpdf$wed_hrs <- gsub("\\\n|   |  ", "", yelpdf$wed_hrs)
yelpdf$thu_hrs <- gsub("\\\n|   |  ", "", yelpdf$thu_hrs)
yelpdf$fri_hrs <- gsub("\\\n|   |  ", "", yelpdf$fri_hrs)
yelpdf$sat_hrs <- gsub("\\\n|   |  ", "", yelpdf$sat_hrs)
yelpdf$sun_hrs <- gsub("\\\n|   |  ", "", yelpdf$sun_hrs)
# Price Range Clean-Up
yelpdf$prange <- gsub("\\\n|    |  ", "", yelpdf$prange)
# Tags Clean-Up
yelpdf$tags <- gsub("\\\n|\\$|   |  |Edit|Opens|a popup|categories|category", "", yelpdf$tags)
yelpdf$tags <- gsub("\\,","|",yelpdf$tags)
yelpdf$tags <- gsub("   \\|    ", "", yelpdf$tags)
yelpdf$tags <- gsub("\\|", " | ", yelpdf$tags)
pop <- paste0("<b>Business Name:</b> ", yelpdf$name, #set the popup
"<br><b>Address:</b> ", yelpdf$address,
"<br><b>Monday Hours:</b> ", yelpdf$mon_hrs,
"<br><b>Tuesday Hours:</b> ", yelpdf$tue_hrs,
"<br><b>Wednesday Hours:</b> ", yelpdf$wed_hrs,
"<br><b>Thursday Hours:</b> ", yelpdf$thu_hrs,
"<br><b>Friday Hours:</b> ", yelpdf$fri_hrs,
"<br><b>Saturday Hours:</b> ", yelpdf$sat_hrs,
"<br><b>Price Range:</b> ", yelpdf$prange,
"<br><b>Tags:</b> ", yelpdf$tags)
leaflet() %>% addTiles() %>%  addMarkers(data = yelpdf, popup = pop,lat = as.numeric(yelpdf$latitude), lng = as.numeric(as.character(yelpdf$longitude)))
library(rvest)
library(jsonlite)
library(purrr)
library(dplyr)
library(lubridate)
library(stringr)
library(leaflet)
options(stringsAsFactors = F)
pop <- paste0("<b>Business Name:</b> ", yelpdf$name, #set the popup
"<br><b>Address:</b> ", yelpdf$address,
"<br><b>Monday Hours:</b> ", yelpdf$mon_hrs,
"<br><b>Tuesday Hours:</b> ", yelpdf$tue_hrs,
"<br><b>Wednesday Hours:</b> ", yelpdf$wed_hrs,
"<br><b>Thursday Hours:</b> ", yelpdf$thu_hrs,
"<br><b>Friday Hours:</b> ", yelpdf$fri_hrs,
"<br><b>Saturday Hours:</b> ", yelpdf$sat_hrs,
"<br><b>Price Range:</b> ", yelpdf$prange,
"<br><b>Tags:</b> ", yelpdf$tags)
leaflet() %>% addTiles() %>%  addMarkers(data = yelpdf, popup = pop,lat = as.numeric(yelpdf$latitude), lng = as.numeric(as.character(yelpdf$longitude)))
opentime <- function(x){
if (x == "Closed") {
return(x)
} else {
spl <- toupper(unlist(str_split(x, " ")))
op <- paste0(spl[1], " ", spl[2])
optime <- strptime(op, format = "%I:%M %p")
optime <- strftime(optime, format = "%H:%M")
}
}
closetime <- function(x){
if (x == "Closed") {
return(x)
} else {
spl <- toupper(unlist(str_split(x, " ")))
cl <- paste0(spl[length(spl)-1], " ", spl[length(spl)])
cltime <- strptime(cl, format = "%I:%M %p")
cltime <- strftime(cltime, format = "%H:%M")
}
}
yelpdf$fri_open <- as.character(lapply(yelpdf$fri_hrs, opentime))
yelpdf$fri_close <- as.character(lapply(yelpdf$fri_hrs, closetime))
yelpdf$sat_open <- as.character(lapply(yelpdf$sat_hrs, opentime))
yelpdf$sat_close <- as.character(lapply(yelpdf$sat_hrs, closetime))
close_num <- function(x){
if (x == "Closed") {
return(NA)
} else if(!is.na(x)) {
first <- as.numeric(unlist(str_split(x, "\\:"))[1])
second <- unlist(str_split(x, "\\:"))[2]
second <- gsub("3", "5", second)
if (first >= 7) {
paste0(first - 6, ".", second)
} else if (first <= 6) {
paste0(first + 18, ".", second)
} else {
return(x)
}
} else {
return(x)
}
}
yelpdf$fri_close_num <- as.numeric(lapply(yelpdf$fri_close, close_num))
View(yelpdf)
yelpdf$fri_close_num <- as.numeric(lapply(yelpdf$fri_close, close_num))
pop <- paste0("<b>Business Name:</b> ", yelpdf$name, #set the popup
"<br><b>Address:</b> ", yelpdf$address,
"<br><b>Monday Hours:</b> ", yelpdf$mon_hrs,
"<br><b>Tuesday Hours:</b> ", yelpdf$tue_hrs,
"<br><b>Wednesday Hours:</b> ", yelpdf$wed_hrs,
"<br><b>Thursday Hours:</b> ", yelpdf$thu_hrs,
"<br><b>Friday Hours:</b> ", yelpdf$fri_hrs,
"<br><b>Saturday Hours:</b> ", yelpdf$sat_hrs,
"<br><b>Price Range:</b> ", yelpdf$prange,
"<br><b>Tags:</b> ", yelpdf$tags)
leaflet() %>% addTiles() %>%  addMarkers(data = yelpdf, popup = pop,lat = as.numeric(yelpdf$latitude), lng = as.numeric(as.character(yelpdf$longitude)))
close_num <- function(x){
if (x == "Closed") {
return(NA)
} else if(!is.na(x)) {
first <- as.numeric(unlist(str_split(x, "\\:"))[1])
second <- unlist(str_split(x, "\\:"))[2]
second <- gsub("3", "5", second)
if (first >= 7) {
paste0(first - 6, ".", second)
} else if (first <= 6) {
paste0(first + 18, ".", second)
} else {
return(x)
}
} else {
return(x)
}
}
yelpdf$fri_close_num <- as.numeric(lapply(yelpdf$fri_close, close_num))
yelpdf$sat_close[1]
yelpdf$fri_close_num <- as.numeric(lapply(yelpdf$fri_close[1], close_num))
yelpdf$fri_close_num <- as.numeric(lapply(yelpdf$fri_close, close_num))
yelpdf$fri_close_num <- as.numeric(lapply(yelpdf$fri_close[2], close_num))
yelpdf$fri_close[NA] <- ""
View(yelpdf)
yelpdf[is.na(yelpdf$fri_close),] <- ""
yelpdf <- readRDS("NL_Master.rds")
yelpdf$name <- gsub("\\\n|   |  ", "", yelpdf$name) #Removes "\\n, and unnecessary spaces
# Address Clean-Up
yelpdf$address <- gsub("\\\n|    |  ", "", yelpdf$address)
yelpdf$address <- gsub("Portland", " Portland", yelpdf$address)
yelpdf$address <- gsub("Ste", " Ste", yelpdf$address)
yelpdf$address <- gsub("Beaverton", " Beaverton", yelpdf$address)
# Hours Clean-Up
yelpdf$mon_hrs <- gsub("\\\n|   |  ", "", yelpdf$mon_hrs)
yelpdf$tue_hrs <- gsub("\\\n|   |  ", "", yelpdf$tue_hrs)
yelpdf$wed_hrs <- gsub("\\\n|   |  ", "", yelpdf$wed_hrs)
yelpdf$thu_hrs <- gsub("\\\n|   |  ", "", yelpdf$thu_hrs)
yelpdf$fri_hrs <- gsub("\\\n|   |  ", "", yelpdf$fri_hrs)
yelpdf$sat_hrs <- gsub("\\\n|   |  ", "", yelpdf$sat_hrs)
yelpdf$sun_hrs <- gsub("\\\n|   |  ", "", yelpdf$sun_hrs)
# Price Range Clean-Up
yelpdf$prange <- gsub("\\\n|    |  ", "", yelpdf$prange)
# Tags Clean-Up
yelpdf$tags <- gsub("\\\n|\\$|   |  |Edit|Opens|a popup|categories|category", "", yelpdf$tags)
yelpdf$tags <- gsub("\\,","|",yelpdf$tags)
yelpdf$tags <- gsub("   \\|    ", "", yelpdf$tags)
yelpdf$tags <- gsub("\\|", " | ", yelpdf$tags)
```{r}
opentime <- function(x){
if (x == "Closed") {
return(x)
} else {
spl <- toupper(unlist(str_split(x, " ")))
op <- paste0(spl[1], " ", spl[2])
optime <- strptime(op, format = "%I:%M %p")
optime <- strftime(optime, format = "%H:%M")
}
}
closetime <- function(x){
if (x == "Closed") {
return(x)
} else {
spl <- toupper(unlist(str_split(x, " ")))
cl <- paste0(spl[length(spl)-1], " ", spl[length(spl)])
cltime <- strptime(cl, format = "%I:%M %p")
cltime <- strftime(cltime, format = "%H:%M")
}
}
yelpdf$fri_open <- as.character(lapply(yelpdf$fri_hrs, opentime))
yelpdf$fri_close <- as.character(lapply(yelpdf$fri_hrs, closetime))
yelpdf$sat_open <- as.character(lapply(yelpdf$sat_hrs, opentime))
yelpdf$sat_close <- as.character(lapply(yelpdf$sat_hrs, closetime))
close_num <- function(x){
if (x == "Closed") {
return(NA)
} else if(!is.na(x)) {
first <- as.numeric(unlist(str_split(x, "\\:"))[1])
second <- unlist(str_split(x, "\\:"))[2]
second <- gsub("3", "5", second)
if (first >= 7) {
paste0(first - 6, ".", second)
} else if (first <= 6) {
paste0(first + 18, ".", second)
} else {
return(x)
}
} else {
return(x)
}
}
yelpdf2 <- yelpdf[!(yelpdf$fri_close == "Closed" | yelpdf$sat_close == "Closed"),]
yelpdf2 <- yelpdf[!(yelpdf$fri_close == "Closed" | yelpdf$sat_close == "Closed"),]
yelpdf2$fri_close_num <- as.numeric(lapply(yelpdf2$fri_close[2], close_num))
yelpdf2$sat_close_num <- as.numeric(lapply(yelpdf2$sat_close, close_num))
close_num2 <- function(x){
if(!is.na(x)) {
first <- as.numeric(unlist(str_split(x, "\\:"))[1])
second <- unlist(str_split(x, "\\:"))[2]
second <- gsub("3", "5", second)
if (first >= 7) {
paste0(first - 6, ".", second)
} else if (first <= 6) {
paste0(first + 18, ".", second)
} else {
return(x)
}
} else {
return(x)
}
}
yelpdf2$fri_close_num <- as.numeric(lapply(yelpdf2$fri_close[2], close_num2))
yelpdf2$sat_close_num <- as.numeric(lapply(yelpdf2$sat_close, close_num2))
View(yelpdf2)
barplot(yelpdf2$fri_close_num, names.arg = yelpdf2$names, main = "Open Late Businesses", ylab = "Lateness", xlab = "Business")
setwd("/media/atrusty/WHISTLE/Scraping/Projects/Open_Late/NightLife/")
require(rgdal)
writeOGR(yelpdf2, ".", "ESRI Shapefile")
writeOGR(yelpdf2, ".", driver = "ESRI Shapefile")
require(sp)
require(leaflet)
wgs84<-CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
names(yelpdf2)
nlsp<-SpatialPointsDataFrame(coords = yelpdf2[,c(13,12)],
data = yelpdf2,
proj4string = wgs84
)
wgs84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
yelpdf2$latitude <- as.numeric(as.character(yelpdf2$latitude))
yelpdf2$longitude <- as.numeric(as.character(yelpdf2$longitude))
names(yelpdf2)
NLSp <- SpatialPointsDataFrame(coords = yelpdf2[,c(13,12)],data = yelpdf2, proj4string = wgs84)
yelpdf2 <- yelpdf2[!is.na(yelpdf2$longitude),]
wgs84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
yelpdf2$latitude <- as.numeric(as.character(yelpdf2$latitude))
yelpdf2$longitude <- as.numeric(as.character(yelpdf2$longitude))
NLSp <- SpatialPointsDataFrame(coords = yelpdf2[,c(13,12)],data = yelpdf2, proj4string = wgs84)
writeOGR(NLSp, ".", "NLSpatial2", "ESRI Shapefile")
View(NLSp)
head(NLSp)
setwd("/home/atrusty/QGIS/")
writeOGR(NLSp, ".", "NLSpatial3", "ESRI Shapefile")
setwd("/home/atrusty/QGIS/")
setwd("/home/atrusty/QGIS/")
setwd("/home/atrusty/QGIS/")
writeOGR(NLSp, ".", "NLSpatial3", "ESRI Shapefile")
rm(dee)
rm(dick)
gc()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/home/atrusty/alectrusty.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/home/atrusty/alectrusty.github.io/")
#render your sweet site.
rmarkdown::render_site()
