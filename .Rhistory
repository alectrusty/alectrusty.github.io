m
# Create a color Palette
pal <- colorNumeric(palette = "YlOrRd", projPdx$bldgsqft)
# Create a popup
popup <- paste0("<strong>Building Size (sq.ft): </strong>",
projPdx$bldgsqft,
"<br><strong>Median Year Built: </strong>",
projPdx$MEDYRBUILT)
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = ~bldgsqft,
title = "Building Size",
opacity = 1)
m
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup)
m
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal,
title = "Average Building Size",
opacity = 1)
m
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = ~bldgsqft,
title = "Average Building Size",
opacity = 1)
m
# Create a color Palette
pal <- colorNumeric(palette = "YlOrRd", domain = projPdx$bldgsqft)
# Create a popup
popup <- paste0("<strong>Building Size (sq.ft): </strong>",
projPdx$bldgsqft,
"<br><strong>Median Year Built: </strong>",
projPdx$MEDYRBUILT)
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = ~bldgsqft,
title = "Average Building Size",
opacity = 1)
m
projPdx<-spTransform(pdx_sf,CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
# Create a color Palette
pal <- colorNumeric(palette = "YlOrRd", domain = projPdx$bldgsqft)
# Create a popup
popup <- paste0("<strong>Building Size (sq.ft): </strong>",
projPdx$bldgsqft,
"<br><strong>Median Year Built: </strong>",
projPdx$MEDYRBUILT)
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = ~bldgsqft,
title = "Average Building Size",
opacity = 1)
m
# Create a color Palette
pal <- colorNumeric(palette = "YlOrRd", domain = projPdx$bldgsqft)
# Create a popup
popup <- paste0("<strong>Building Size (sq.ft): </strong>",
projPdx$bldgsqft,
"<br><strong>Median Year Built: </strong>",
projPdx$MEDYRBUILT)
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$bldgsqft,
title = "Average Building Size",
opacity = 1)
m
?addLegend
pal <- colorNumeric(palette = "YlOrRd", domain = projPdx$bldgsqft)
# Create a popup
popup <- paste0("<strong>Building Size (sq.ft): </strong>",
projPdx$bldgsqft,
"<br><strong>Median Year Built: </strong>",
projPdx$MEDYRBUILT)
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$bldgsqft,
title = "Average Building Size",
opacity = 1)
m
names(projPdx)
# Create a popup
popup <- paste0("<strong>Mean Building Size (sq.ft): </strong>",
projPdx$bldgsqft,
"<br><strong>Median Year Built: </strong>",
projPdx$MEDYRBUILT,
"<strong>Mean Lot Size (Acres): </strong>",
projPdx$gis_acres,
"<br><strong>Mean Building Value: </strong>",
projPdx$bldgval,
"<strong>Housing Density (Buildings / Acre): </strong>",
projPdx$density,
"<br><strong>Median Household Income: </strong>",
projPdx$MHI)
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$bldgsqft,
title = "Average Building Size",
opacity = 1, )
m
# Create a popup
popup <- paste0("<strong>Mean Building Size (sq.ft): </strong>",
projPdx$bldgsqft,
"<br><strong>Median Year Built: </strong>",
projPdx$MEDYRBUILT,
"<br><strong>Mean Lot Size (Acres): </strong>",
projPdx$gis_acres,
"<br><strong>Mean Building Value: </strong>",
projPdx$bldgval,
"<br><strong>Housing Density (Buildings / Acre): </strong>",
projPdx$density,
"<br><strong>Median Household Income: </strong>",
projPdx$MHI)
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$bldgsqft,
title = "Average Building Size",
opacity = 1, )
m
# Create a popup
popup <- paste0("<strong>Mean Building Size (sq.ft): </strong>",
round(projPdx$bldgsqft, 3),
"<br><strong>Median Year Built: </strong>",
projPdx$MEDYRBUILT,
"<br><strong>Mean Lot Size (Acres): </strong>",
projPdx$gis_acres,
"<br><strong>Mean Building Value: </strong>",
projPdx$bldgval,
"<br><strong>Housing Density (Buildings / Acre): </strong>",
projPdx$density,
"<br><strong>Median Household Income: </strong>",
projPdx$MHI)
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$bldgsqft,
title = "Average Building Size",
opacity = 1, )
m
popup <- paste0("<strong>Mean Building Size (sq.ft): </strong>",
round(projPdx$bldgsqft, 2),
"<br><strong>Median Year Built: </strong>",
round(projPdx$MEDYRBUILT, 2),
"<br><strong>Mean Lot Size (Acres): </strong>",
round(projPdx$gis_acres, 2),
"<br><strong>Mean Building Value: </strong>",
round(projPdx$bldgval, 2),
"<br><strong>Housing Density (Buildings / Acre): </strong>",
round(projPdx$density, 2),
"<br><strong>Median Household Income: </strong>",
round(projPdx$MHI, 2))
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$bldgsqft,
title = "Average Building Size",
opacity = 1, )
m
# Create a popup
popup <- paste0("<strong>Mean Building Size (sq.ft): </strong>",
round(projPdx$bldgsqft, 2),
"<br><strong>Median Year Built: </strong>",
round(projPdx$MEDYRBUILT, 2),
"<br><strong>Mean Lot Size (Acres): </strong>",
round(projPdx$gis_acres, 2),
"<br><strong>Mean Building Value: </strong>",
round(projPdx$bldgval, 2),
"<br><strong>Housing Density (Buildings / Acre): </strong>",
round(projPdx$density, 4),
"<br><strong>Median Household Income: </strong>",
round(projPdx$MHI, 2))
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(bldgsqft), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$bldgsqft,
title = "Average Building Size",
opacity = 1, )
m
install.packages("flexdashboard")
library(flexdashboard)
library(rgdal)
library(leaflet)
library(dplyr)
library(magrittr)
library(readr)
library(knitr)
library(shiny)
library(flexdashboard)
library(rgdal)
library(leaflet)
library(dplyr)
library(magrittr)
library(readr)
library(knitr)
library(shiny)
---
title: "Choropleth Map by USA Zipcode Level"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: scroll
social: [ "twitter", "facebook", "menu" ]
source_code: embed
theme: flatly
runtime: shiny
---
```{r setup, include=FALSE}
# Load packages and initialize data here
library(flexdashboard)
library(rgdal)
library(leaflet)
library(dplyr)
library(magrittr)
library(readr)
library(knitr)
library(shiny)
```
Map
=========================
Sidebar {.sidebar}
----------------------------
Here is a leaflet map showing the estimated population at a state-level by zipcode. The data was obtained from [USA Zipcode](http://www.unitedstateszipcodes.org).
```{r}
hr()
selectInput("state", label = "Select a state: ",
choices = state.abb, selected = "NY")
```
Made for fun by [Jasmine Dumas](http://jasdumas.github.io/)
Map {data-height=1000}
----------------------------
```{r}
```
Reproducible Script
=====================================
```{r, echo=TRUE, eval=FALSE}
```
Web Map Resources
=====================================
A choropleth map  is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed on the map, such as population density or per-capita income.
The choropleth map provides an easy way to visualize how a measurement varies across a geographic area or it shows the level of variability within a region. [Wikipedia Source](https://en.wikipedia.org/wiki/Choropleth_map)
* [Leaflet for R](https://rstudio.github.io/leaflet/)
* [Leaflet.js](http://leafletjs.com/)
* [Anatomy of a Web Map](http://maptime.io/anatomy-of-a-web-map/#0)
* [Wikipedia: Web mapping](https://en.wikipedia.org/wiki/Web_mapping)
* [Bivariate Choropleth Maps: A How-to Guide](http://www.joshuastevens.net/cartography/make-a-bivariate-choropleth-map/)
---
title: "Choropleth Map by USA Zipcode Level"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: scroll
social: [ "twitter", "facebook", "menu" ]
source_code: embed
theme: flatly
runtime: shiny
---
```{r setup, include=FALSE}
# Load packages and initialize data here
library(flexdashboard)
library(rgdal)
library(leaflet)
library(dplyr)
library(magrittr)
library(readr)
library(knitr)
library(shiny)
```
Map
=========================
Sidebar {.sidebar}
----------------------------
Here is a leaflet map showing the estimated population at a state-level by zipcode. The data was obtained from [USA Zipcode](http://www.unitedstateszipcodes.org).
```{r}
hr()
selectInput("state", label = "Select a state: ",
choices = state.abb, selected = "NY")
```
Made for fun by [Jasmine Dumas](http://jasdumas.github.io/)
Map {data-height=1000}
----------------------------
```{r}
```
Reproducible Script
=====================================
```{r, echo=TRUE, eval=FALSE}
```
Web Map Resources
=====================================
A choropleth map  is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed on the map, such as population density or per-capita income.
The choropleth map provides an easy way to visualize how a measurement varies across a geographic area or it shows the level of variability within a region. [Wikipedia Source](https://en.wikipedia.org/wiki/Choropleth_map)
* [Leaflet for R](https://rstudio.github.io/leaflet/)
* [Leaflet.js](http://leafletjs.com/)
* [Anatomy of a Web Map](http://maptime.io/anatomy-of-a-web-map/#0)
* [Wikipedia: Web mapping](https://en.wikipedia.org/wiki/Web_mapping)
* [Bivariate Choropleth Maps: A How-to Guide](http://www.joshuastevens.net/cartography/make-a-bivariate-choropleth-map/)
names(pdx_sf)
# Load packages and initialize data here
library(flexdashboard)
library(rgdal)
library(leaflet)
library(dplyr)
library(magrittr)
library(readr)
library(knitr)
library(shiny)
variable <- reactive({input$variable})
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
projPdx[,"bldgsqft"]
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
projPdx@data[,"bldgsqft"]
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
pal <- colorNumeric(palette = "YlOrRd", domain = projPdx$MEDYRBUILT)
# Create a popup
popup <- paste0("<strong>Mean Building Size (sq.ft): </strong>",
round(projPdx$bldgsqft, 2),
"<br><strong>Median Year Built: </strong>",
round(projPdx$MEDYRBUILT, 2),
"<br><strong>Mean Lot Size (Acres): </strong>",
round(projPdx$gis_acres, 2),
"<br><strong>Mean Building Value: </strong>",
round(projPdx$bldgval, 2),
"<br><strong>Housing Density (Buildings / Acre): </strong>",
round(projPdx$density, 4),
"<br><strong>Median Household Income: </strong>",
round(projPdx$MHI, 2))
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(MEDYRBUILT), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$MEDYRBUILT,
title = "Average Building Size",
opacity = 1)
m
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('D:/ajax/trusty_analytics/Shiny-Applications/Shiny_DataCamp/02-Basic-Reactive-ScatterPlot-App.R')
runApp('D:/ajax/trusty_analytics/Shiny-Applications/Shiny_DataCamp/00-Basic-Shiny-App.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
names(pdx_sf)
runApp('first_shiny_map.R')
runApp('first_shiny_map.R')
?addLegend
?addLegend()
# Server needs to create the following
# Create a color Palette
pal <- colorNumeric(palette = "YlOrRd", domain = projPdx$MEDYRBUILT)
# Packages
library(sf)
library(shiny)
library(shinythemes)
library(leaflet)
library(tidyverse)
library(tidycensus)
library(rgdal)
# Environment Settings
setwd("D:/ajax/trusty_analytics/Shiny-Applications/Shiny_PDX_HousingExplorer/")
# Read in Data
pdx_sf <- readOGR("Data/pdx_ee_clean_1172019/pdx_ee_clean_1172019.shp") # read in data
projPdx<-spTransform(pdx_sf,CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")) # set CRS
# Server needs to create the following
# Create a color Palette
pal <- colorNumeric(palette = "YlOrRd", domain = projPdx$MEDYRBUILT)
# Create a popup
popup <- paste0("<strong>Mean Building Size (sq.ft): </strong>",
round(projPdx$bldgsqft, 2),
"<br><strong>Median Year Built: </strong>",
round(projPdx$MEDYRBUILT, 2),
"<br><strong>Mean Lot Size (Acres): </strong>",
round(projPdx$gis_acres, 2),
"<br><strong>Mean Building Value: </strong>",
round(projPdx$bldgval, 2),
"<br><strong>Housing Density (Buildings / Acre): </strong>",
round(projPdx$density, 4),
"<br><strong>Median Household Income: </strong>",
round(projPdx$MHI, 2))
m <- leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(data = projPdx, weight = 1, fillOpacity = 0.75,
fillColor = ~pal(MEDYRBUILT), color = "#BDBDC3", popup = popup) %>%
addLegend(position = "bottomright", pal = pal, values = projPdx$MEDYRBUILT,
title = "Average Building Size",
opacity = 1)
m
install.packages("shinydashboard")
library(shinydashboard)
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
ggplot(data = as.data.frame(pdx_sf), aes(blgsqft)) +
geom_histogram()
ggplot(data = as.data.frame(pdx_sf), aes(x = bldgsqft)) +
geom_histogram()
ggplot(data = as.data.frame(pdx_sf), aes(x = bldgsqft)) +
geom_freqpoly()
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('D:/ajax/trusty_analytics/Shiny-Applications/Shiny_DataCamp/06-Basic-Scatterplot-wSumStats-App.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
runApp('dashboard_example.R')
names(pdx_sf)
head(pdx_sf$GT25_GTBA)
runApp('dashboard_example.R')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
