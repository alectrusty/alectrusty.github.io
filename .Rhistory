addresses <- mv[-31,]$match_address[1:40]
shityeah <- alsgeocoder(addresses)
addresses <- mv[-31,]$match_address[1:30]
shityeah <- alsgeocoder(addresses)
addresses <- mv[-31,]$match_address[1:35]
shityeah <- alsgeocoder(addresses)
addresses <- mv[-31,]$match_address[1:34]
shityeah <- alsgeocoder(addresses)
addresses <- mv[-31,]$match_address[1:33]
shityeah <- alsgeocoder(addresses)
addresses <- mv[-31,]$match_address[1:32]
shityeah <- alsgeocoder(addresses)
addresses <- mv[-31,]$match_address[1:33]
address
addresses
chk <- "15300 SE MCLOUGHLIN BLVD, 97267"
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
curl <- lapply(chk, urlgetter)
return <- GET(curl) %>% read_html %>% html_text %>% fromJSON()
curl
curl
return <- GET(unlist(curl)) %>% read_html %>% html_text %>% fromJSON()
return
return$status
return$status == "ZERO_RESULTS"
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#curl <- lapply(chk, urlgetter)
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status = "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
return(goods)
} else {
return("No Results")
}
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, alscoder)
return(df)
}
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status = "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
return(goods)
} else {
return("No Results")
}
}
geocoder <- function(x){
gcreturn <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (gcreturn$status = "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
geocoder <- function(x){
gcreturn <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (gcreturn$status = "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status = "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status = "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status = "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#curl <- lapply(chk, urlgetter)
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, alscoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
curl <- lapply(chk, urlgetter)
df <- lapply(curl, geocoder)
df
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
urls <- lapply(x, urlgetter)
df <- lapply(curl, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
shityeah
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
goods <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
goods <- "No Results"
}
return(goods)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
shityeah
addresses <- mv[-31,]$match_address
shityeah <- alsgeocoder(addresses)
shityeah
alsgeocoder <- function(addresses){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(addresses, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
addressez <- mv[-31,]$match_address
shityeah <- alsgeocoder(addressez)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
shityeah <- alsgeocoder(addresses)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
geocoder <- function(){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(goods) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- GET(x) %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(results) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- x %>% read_html %>% html_text %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(results) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
View(shityeah)
rbind(shityeah)
lapply(shityeah, rbind)
chkers <- lapply(shityeah, rbind)
lapply
View(chkers)
shityeah <- alsgeocoder(addresses)
alsgeocoder <- function(x){
#This creates urls from the input addresses
urlgetter <- function(x){
str <- gsub(" ", "+", x)
togc <- paste0("http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=", str)
return(togc)
}
#This sends the urls to the Open Data Science Toolkit geocoder and returns lat, lon, address, and type
geocoder <- function(x){
return <- x %>% read_html() %>% html_text() %>% fromJSON()
if (return$status == "OK"){
results <- as.data.frame(cbind(return$results$geometry$location$lat, return$results$geometry$location$lng, paste0(return$results$address_components[[1]]$short_name, sep = " ", collapse = ""), return$results$geometry$location_typ))
colnames(results) <- c("Lat", "Lon", "Address", "Type")
} else {
results <- "No Results"
}
return(results)
}
urls <- lapply(x, urlgetter)
df <- lapply(urls, geocoder)
return(df)
}
shityeah <- alsgeocoder(addresses)
library(rvest)
library(jsonlite)
library(purrr)
library(dplyr)
boxplot(wq.orig, xlab = "Water Quality Variable", ylab = "Distribution")
#Remove all NA values and subset the data into Water Quality and Watershed Variables
hw1.1<-na.omit(hw1)  #remove all missing values from the dataset
wq.orig<-hw1.1[,c(2:20)]      #split the data into a subset with all water quality variables
ws.orig<-hw1.1[,c(21:34)]
wq<-hw1.1[,c(2:20)]      #split the data into a subset with all water quality variables
ws<-hw1.1[,c(21:34)]
wq2 <- scale(wq)
ws2 <- scale(ws)
#Remove all NA values and subset the data into Water Quality and Watershed Variables
hw1.1<-na.omit(hw1)  #remove all missing values from the dataset
hw1 <- read.csv("/media/atrusty/WHISTLE/Winter_Term_2017/ESM567/Homework_1/wemap_pnw_rda_HW.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
hw1.1<-na.omit(hw1)  #remove all missing values from the dataset
wq.orig<-hw1.1[,c(2:20)]      #split the data into a subset with all water quality variables
ws.orig<-hw1.1[,c(21:34)]
wq<-hw1.1[,c(2:20)]      #split the data into a subset with all water quality variables
ws<-hw1.1[,c(21:34)]
wq2 <- scale(wq)
ws2 <- scale(ws)
boxplot(wq.orig, xlab = "Water Quality Variable", ylab = "Distribution")
boxplot(scale(log(wq)), xlab = "Water Quality Variable", ylab = "Log Distribution")
boxplot(log(ws.orig))
par(mfrow = c(2,2))
boxplot(wq.orig, xlab = "Water Quality Variable", ylab = "Distribution")
boxplot(scale(log(wq)), xlab = "Water Quality Variable", ylab = "Log Distribution")
boxplot(ws.orig, xlab = "Watershed Variable", ylab = "Distribution")
par(mfrow = c(2,2))
boxplot(wq.orig, xlab = "Water Quality Variable", ylab = "Distribution")
boxplot(scale(log(wq)), xlab = "Water Quality Variable", ylab = "Log Distribution")
boxplot(ws.orig, xlab = "Watershed Variable", ylab = "Distribution")
par(mfrow = c(2,1))
boxplot(wq.orig, xlab = "Water Quality Variable", ylab = "Distribution")
boxplot(scale(log(wq)), xlab = "Water Quality Variable", ylab = "Log Distribution")
par(mfrow = c(2,1))
boxplot(ws, xlab = "Watershed Variables", ylab = "Distribution")
boxplot(scale(log(ws)), xlab = "Watershed Variables", ylab = "Log Distribution")
par(mfrow = c(2,1))
boxplot(ws, main = "a", xlab = "Watershed Variables", ylab = "Distribution")
boxplot(scale(log(ws)), main = "b", xlab = "Watershed Variables", ylab = "Log Distribution")
pca.wq<-princomp(scale(log(wq+1))) #run PCA with log-transformed and standardized data
biplot(pca.wq) #biplot
#Run PCA first
pca.wq<-princomp(scale(log(wq+1))) #run PCA with log-transformed and standardized data
biplot(pca.wq, xlab = "Component I", ylab = "Component II") #biplot
#Full Model
rda.pnw <- rda(scale(log(wq+1))~., center = T, data= log(ws+1), scale=T)
library(vegan)
library(vegan)
library(pander)
options(scipen = 999)
mod.0 <- rda(scale(log(wq+1))~1, center = T, data= log(ws+1),scale=T)
summary(mod.0)
#Hybrid Selection
mod.1 <- step(mod.0, scope = formula(rda.pnw))
#Full Model
rda.pnw <- rda(scale(log(wq+1))~., center = T, data= log(ws+1), scale=T)
summary(rda.pnw)
#Null Model
mod.0 <- rda(scale(log(wq+1))~1, center = T, data= log(ws+1),scale=T)
summary(mod.0)
#Hybrid Selection
mod.1 <- step(mod.0, scope = formula(rda.pnw))
#Potential Reduced Model
rda.pnw.1 <- rda(scale(log(wq + 1)) ~ PRECIP_M + ELEVMEAN + LAT_DD + AG_TOT +
LON_DD + RNG_TOT + SLOPMEAN + W1_HALL + FOR_TOT + WSAREA +
RD_DEN + POPDENKM, data = log(ws+1), center = T, scale = T)
plot(rda.pnw.1)
#Full Model
rda.pnw <- rda(scale(log(wq+1))~., center = T, data= log(ws+1), scale=T)
#Null Model
mod.0 <- rda(scale(log(wq+1))~1, center = T, data= log(ws+1),scale=T)
#Hybrid Selection
mod.1 <- step(mod.0, scope = formula(rda.pnw))
#Potential Reduced Model
rda.pnw.1 <- rda(scale(log(wq + 1)) ~ PRECIP_M + ELEVMEAN + LAT_DD + AG_TOT +
LON_DD + RNG_TOT + SLOPMEAN + W1_HALL + FOR_TOT + WSAREA +
RD_DEN + POPDENKM, data = log(ws+1), center = T, scale = T)
plot(rda.pnw.1)
plot(rda.pnw.1)
plot(rda.pnw.1, xlab = "RDA I", ylab = "RDA II")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/home/atrusty/alectrusty.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/home/atrusty/alectrusty.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/home/atrusty/alectrusty.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/home/atrusty/alectrusty.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/home/atrusty/alectrusty.github.io/")
#render your sweet site.
rmarkdown::render_site()
gc()
